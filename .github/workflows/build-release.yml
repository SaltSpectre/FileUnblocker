name: Build and Release

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  generate-version:
    runs-on: ubuntu-latest
    outputs:
      rust_version: ${{ steps.version.outputs.RUST_VERSION }}
      msi_version: ${{ steps.version.outputs.MSI_VERSION }}
      tag: ${{ steps.version.outputs.TAG }}
    steps:
    - name: Generate version
      id: version
      run: |
        date=$(date '+%y.%-m.%-d')
        runNumber=${GITHUB_RUN_NUMBER:-0}
        rust_version="$date+$runNumber"
        msi_version="$date.$runNumber"
        echo "RUST_VERSION=$rust_version" >> $GITHUB_OUTPUT
        echo "MSI_VERSION=$msi_version" >> $GITHUB_OUTPUT
        echo "TAG=v$rust_version" >> $GITHUB_OUTPUT
        echo "Generated Rust version: $rust_version"
        echo "Generated MSI version: $msi_version"

  build:
    needs: generate-version
    runs-on: windows-latest
    strategy:
      matrix:
        target: [x86_64-pc-windows-msvc, aarch64-pc-windows-msvc]
    outputs:
      rust_version: ${{ needs.generate-version.outputs.rust_version }}
      msi_version: ${{ needs.generate-version.outputs.msi_version }}
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Cache cargo registry and target
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          rust/target
        key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('rust/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.target }}-
          ${{ runner.os }}-cargo-
    
    - name: Update Cargo.toml version
      run: |
        $version = "${{ needs.generate-version.outputs.rust_version }}"
        $cargoPath = "rust/Cargo.toml"
        (Get-Content $cargoPath) -replace '^version = ".*"', "version = `"$version`"" | Set-Content $cargoPath
        Write-Host "Updated Cargo.toml version to: $version"
    
    - name: Build release
      working-directory: rust
      run: cargo build --release --target ${{ matrix.target }}
    
    - name: Prepare and upload artifact
      run: |
        $target = "${{ matrix.target }}"
        $arch = if ($target -eq "x86_64-pc-windows-msvc") { "x64" } else { "arm64" }
        $artifactName = "portable-unblocker-$arch.exe"
        Copy-Item "rust/target/$target/release/unblocker.exe" $artifactName
        echo "ARTIFACT_NAME=$artifactName" >> $env:GITHUB_ENV
        echo "ARTIFACT_ARCH=$arch" >> $env:GITHUB_ENV
    
    - name: Upload portable executable
      uses: actions/upload-artifact@v4
      with:
        name: portable-unblocker-${{ env.ARTIFACT_ARCH }}
        path: ${{ env.ARTIFACT_NAME }}
        retention-days: 90

  build-installer:
    needs: [generate-version, build]
    runs-on: windows-latest
    if: (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    strategy:
      matrix:
        platform: [x64, arm64]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Install WiX
      run: dotnet tool install --global wix --verbosity quiet
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        pattern: portable-unblocker-*
    
    - name: Prepare executables for installer
      run: |
        $platform = "${{ matrix.platform }}"
        $targetDir = if ($platform -eq "x64") { "x86_64-pc-windows-msvc" } else { "aarch64-pc-windows-msvc" }
        $artifactDir = "portable-unblocker-$platform"
        
        New-Item -ItemType Directory -Force "rust/target/$targetDir/release" | Out-Null
        Copy-Item "artifacts/$artifactDir/portable-unblocker-$platform.exe" "rust/target/$targetDir/release/unblocker.exe"
    
    - name: Build MSI installer
      working-directory: wix
      run: |
        $msi_version = "${{ needs.generate-version.outputs.msi_version }}"
        $rust_version = "${{ needs.generate-version.outputs.rust_version }}"
        $platform = "${{ matrix.platform }}"

        dotnet build -p:Platform="$platform" -p:VERSION="$msi_version" -p:Configuration=Release --verbosity minimal

        $outputName = "FileUnblocker-$platform-$rust_version.msi"
        Copy-Item "bin/$platform/Release/FileUnblocker-$platform.msi" $outputName
        echo "MSI_NAME=$outputName" >> $env:GITHUB_ENV
    
    - name: Upload MSI installer
      uses: actions/upload-artifact@v4
      with:
        name: msi-installer-${{ matrix.platform }}
        path: wix/${{ env.MSI_NAME }}
        retention-days: 90

  create-release:
    needs: [generate-version, build, build-installer]
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Create GitHub release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ needs.generate-version.outputs.tag }}
        name: "Release ${{ needs.generate-version.outputs.rust_version }}"
        body: |
          ðŸš€ **SaltSpectre File Unblocker ${{ needs.generate-version.outputs.rust_version }}**
          
          Automated release built from commit ${{ github.sha }}
          
          **Downloads:**
          - `FileUnblocker-x64-${{ needs.generate-version.outputs.rust_version }}.msi` - **x64 MSI Installer** - Context menu integration
          - `FileUnblocker-arm64-${{ needs.generate-version.outputs.rust_version }}.msi` - **ARM64 MSI Installer** - Context menu integration
          - `portable-unblocker-x64.exe` - x64 Portable (Intel/AMD 64-bit)
          - `portable-unblocker-arm64.exe` - ARM64 Portable (Windows on ARM)
          
          **Installation:**
          - **MSI Installer**: Run the MSI for your architecture and choose per-user or system-wide installation
          - **Portable**: Download appropriate executable and run directly (no context menu integration)
          
          **Usage:**
          ```cmd
          unblocker.exe "C:\path\to\file.exe"
          unblocker.exe --verbose "C:\path\to\directory" 
          ```
        files: artifacts/**/*
        prerelease: true
        draft: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}